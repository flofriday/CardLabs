stages:
  - analysis
  - build
  - test
  - push
  - deploy

variables:
  FRONTEND_DIR: "frontend"
  MANAGEMENT_DIR: "management"
  GAMESERVER_DIR: "gameserver"
  DOCKER_IMAGE_REGISTRY: "registry.reset.inso-w.at/2023ws-ase-pr-group/23ws-ase-pr-inso-04"

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - ${MANAGEMENT_DIR}/build

analysis:docker:
  image: docker:24.0.7-alpine3.19
  stage: analysis
  script:
    - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD registry.reset.inso-w.at
    - printenv

#########################
### Frontend pipeline ###
#########################
analysis:frontend:
  image: node:20.9.0
  stage: analysis
  script:
    - apt-get update -qq && apt-get install -y nodejs
    - cd ${FRONTEND_DIR}
    - npm install
    - npm run lint
  allow_failure: false

build:frontend:
  image: node:20.9.0
  stage: build
  script:
    - apt-get update -qq && apt-get install -y nodejs
    - cd ${FRONTEND_DIR}
    - npm install
    - npm run build
  dependencies:
    - analysis:frontend
  allow_failure: false

push:frontend:
  image: docker:24.0.7-alpine3.19
  stage: push
  script:
    - docker build -t ${DOCKER_IMAGE_REGISTRY}/frontend:latest ./frontend
    - docker push ${DOCKER_IMAGE_REGISTRY}/frontend:latest
  dependencies:
    - build:frontend
  only:
    - 40-continious-deployment

###########################
### Management pipeline ###
###########################
analysis:management:
  image: gradle:jdk21
  stage: analysis
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle checkstyleMain
    - gradle checkstyleTest
    - gradle ktlintCheck
  allow_failure: false

build:management:
  image: gradle:jdk21
  stage: build
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle assemble
  dependencies:
    - analysis:management
  allow_failure: false

test:management:
  image: gradle:jdk21
  stage: test
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle test --info
  dependencies:
    - build:management
  allow_failure: false

push:management:
  image: docker:24.0.7-alpine3.19
  stage: push
  script:
    - docker build -t ${DOCKER_IMAGE_REGISTRY}/management:latest ./management
    - docker push ${DOCKER_IMAGE_REGISTRY}/management:latest
  dependencies:
    - test:management
  only:
    - 40-continious-deployment

###########################
### GameServer pipeline ###
###########################
analysis:gameserver:
  image: amazoncorretto:21-alpine
  stage: analysis
  script:
    - cd ${GAMESERVER_DIR}
    - ./mvnw clean install
    - ./mvnw ktlint:check
  allow_failure: false

test:gameserver:
  image: amazoncorretto:21-alpine
  stage: test
  script:
    - cd ${GAMESERVER_DIR}
    - ./mvnw clean test
  dependencies:
    - analysis:gameserver
  allow_failure: false

push:gameserver:
  image: docker:24.0.7-alpine3.19
  stage: push
  script:
    - docker build -t ${DOCKER_IMAGE_REGISTRY}/gameserver:latest ./gameserver
    - docker push ${DOCKER_IMAGE_REGISTRY}/gameserver:latest
  dependencies:
    - test:gameserver
  only:
    - 40-continious-deployment

############################
### Continous deployment ###
############################
deploy:
  stage: deploy
  image: bitnami/kubectl
  script:
    - sed -i 's/:latest/:'$CI_PIPELINE_ID'/g' kubernetes.yaml rabbitmq-service.yaml frontend-service.yaml management-service.yaml gameserver-service.yaml
    - cat kubernetes.yaml
    - cat rabbitmq-service.yaml
    - cat frontend-service.yaml
    - cat management-service.yaml
    - cat gameserver-service.yaml
    - kubectl apply -f kubernetes.yaml,rabbitmq-service.yaml,frontend-service.yaml,management-service.yaml,gameserver-service.yaml
  dependencies:
    - push:frontend
    - push:management
    - push:gameserver
  only:
    - 40-continious-deployment
