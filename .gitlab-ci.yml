stages:
  - analysis
  - build
  - test
  - push
  - deploy

variables:
  FRONTEND_DIR: "frontend"
  MANAGEMENT_DIR: "management"
  GAMESERVER_DIR: "gameserver"
  DOCKER_IMAGE_REGISTRY: "registry.reset.inso-w.at/2023ws-ase-pr-group/23ws-ase-pr-inso-04"

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - ${MANAGEMENT_DIR}/build

#########################
### Frontend pipeline ###
#########################
analysis:frontend:
  image: node:20.9.0
  stage: analysis
  script:
    - apt-get update -qq && apt-get install -y nodejs
    - cd ${FRONTEND_DIR}
    - npm install
    - npm run lint
  allow_failure: false

build:frontend:
  image: node:20.9.0
  stage: build
  script:
    - apt-get update -qq && apt-get install -y nodejs
    - cd ${FRONTEND_DIR}
    - npm install
    - npm run build
  dependencies:
    - analysis:frontend
  allow_failure: false

push:frontend:
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  stage: push
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:${CI_PIPELINE_ID}"
  dependencies:
    - build:frontend
  only:
    - master

###########################
### Management pipeline ###
###########################
analysis:management:
  image: gradle:jdk21
  stage: analysis
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle checkstyleMain
    - gradle checkstyleTest
    - gradle ktlintCheck
  allow_failure: false

build:management:
  image: gradle:jdk21
  stage: build
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle assemble
  dependencies:
    - analysis:management
  allow_failure: false

test:management:
  image: gradle:jdk21
  stage: test
  script:
    - cd ${MANAGEMENT_DIR}
    - gradle test --info
  dependencies:
    - build:management
  allow_failure: false

push:management:
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  stage: push
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/management"
      --dockerfile "${CI_PROJECT_DIR}/management/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/management:${CI_PIPELINE_ID}"
  dependencies:
    - test:management
  only:
    - master

###########################
### GameServer pipeline ###
###########################
analysis:gameserver:
  image: amazoncorretto:21-alpine
  stage: analysis
  script:
    - cd ${GAMESERVER_DIR}
    - ./mvnw clean install
    - ./mvnw ktlint:check
  allow_failure: false

test:gameserver:
  image: amazoncorretto:21-alpine
  stage: test
  script:
    - cd ${GAMESERVER_DIR}
    - ./mvnw clean test
  dependencies:
    - analysis:gameserver
  allow_failure: false

push:gameserver:
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  stage: push
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/gameserver"
      --dockerfile "${CI_PROJECT_DIR}/gameserver/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/gameserver:${CI_PIPELINE_ID}"
  dependencies:
    - test:gameserver
  only:
    - master

############################
### Continous deployment ###
############################
deploy:
  stage: deploy
  image: bitnami/kubectl
  script:
    - sed -i 's/:latest/:'$CI_PIPELINE_ID'/g' kubernetes.yaml frontend-service.yaml management-service.yaml gameserver-service.yaml
    - cat kubernetes.yaml
    - cat rabbitmq-service.yaml
    - cat frontend-service.yaml
    - cat management-service.yaml
    - cat gameserver-service.yaml
    - kubectl apply -f kubernetes.yaml,rabbitmq-service.yaml,frontend-service.yaml,management-service.yaml,gameserver-service.yaml
    - sleep 30
    - kubectl get services
    - kubectl get pods
  dependencies:
    - push:frontend
    - push:management
    - push:gameserver
  only:
    - master
