# Persistence storage (H2)
spring.datasource.url=jdbc:h2:mem:testdb;
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.username=sa
spring.datasource.password=
# This directs Spring to interpret queries using the PostgreSQL dialect and generate them as PostgreSQL queries
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Security
# the secret must be in base64
jwt.secret=2e0377d9c56d8a51ed8cfc10a68bda5b3cdc7453a6c7b6ac4728d93e052618051bba4534b146e3cff10bed31224793cb46f78a628b8d6dc08b1b5496a05cf488
# 8 hours, in s
jwt.refresh-token-validity=#{8 * 60 * 60}
# 15 minutes, in s
jwt.access-token-validity=#{15 * 60}

# CardLabs
cardlabs.bot.elo.initial-value=1000
cardlabs.bot.name.generator.syllables.first=Zar,Xen,Kry,Vex,Neo,Jen,Ty,Rax
cardlabs.bot.name.generator.syllables.middle=lon,tar,nix,mek,zor,dor,pho,gi,
cardlabs.bot.name.generator.syllables.last=ium,eon,ax,os,us,tron,lar,phis
cardlabs.matchmaker.match-on-code.enabled=true
cardlabs.matchmaker.match-on-code.generate-match-count=5
cardlabs.matchmaker.match-size.min=2
cardlabs.matchmaker.match-size.max=4
cardlabs.matchmaker.match-skill-difference.relative-elo-difference=0.2
cardlabs.rabbitmq.queue.match-queue=match-queue
cardlabs.rabbitmq.queue.match-result-queue=match-result-queue